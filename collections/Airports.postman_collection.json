{
	"info": {
		"_postman_id": "19e89009-b0df-4b7a-895b-13c95641d1ab",
		"name": "Airports",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22978293"
	},
	"item": [
		{
			"name": "Create new Airport",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"idAirport\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function(){",
							"    pm.response.to.have.status(201)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Marks Group\",\n    \"code\": \"mw3\",\n    \"city\": \"Kuhnhaven\",\n    \"country\": \"Niger\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/airports",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new airport fails",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"   pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.error).to.eql(\"Bad Request\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": null,\n    \"code\": \"mw3\",\n    \"city\": \"Kuhnhaven\",\n    \"country\": \"Niger\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/airports",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a Airport",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"idAirport\", data.id);",
							"",
							"pm.test(\"Status code is 200\", function(){",
							"    pm.response.to.have.status(200)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Marks Group\",\n    \"code\": \"mw3\",\n    \"city\": \"Kuhnhaven\",\n    \"country\": \"Niger\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/airports/{{idAirport}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports",
						"{{idAirport}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a Airport fails",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"   pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.error).to.eql(\"Bad Request\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Marks Group\",\n    \"code\": null,\n    \"city\": \"Kuhnhaven\",\n    \"country\": \"Niger\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/airports/{{idAirport}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports",
						"{{idAirport}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update a Airport that does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The Airport with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Marks Group\",\n    \"code\": \"mw3\",\n    \"city\": \"Kuhnhaven\",\n    \"country\": \"Niger\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/airports/{{idAirportInvalid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports",
						"{{idAirportInvalid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all Airports",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Number of airports > ' + 0, function () {",
							"   var data = pm.response.json()",
							"   pm.expect(data.length).to.greaterThan(0)",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airports",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an Airport",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airports/{{idAirport}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports",
						"{{idAirport}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an airport that does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The Airport with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airports/{{idAirportInvalid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports",
						"{{idAirportInvalid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Airport",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"   pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airports/{{idAirport}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports",
						"{{idAirport}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Airport that does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The Airport with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airports/{{idAirportInvalid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airports",
						"{{idAirportInvalid}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api/v1"
		},
		{
			"key": "idAirportInvalid",
			"value": "00000000-0000-0000-0000-000000000000",
			"type": "string"
		}
	]
}