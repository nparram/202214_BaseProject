{
	"info": {
		"_postman_id": "89415b2c-4477-414e-84ee-3e02389a5e6f",
		"name": "Airlines-Airports",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22978293"
	},
	"item": [
		{
			"name": "Add Airport to Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"idAirline\", data.id);",
							"",
							"pm.test(\"Status code is 201\", function(){",
							"    pm.response.to.have.status(201)",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airlines/{{idAirline}}/airports/{{idAirport}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airlines",
						"{{idAirline}}",
						"airports",
						"{{idAirport}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Airport that does not exist to Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The Airport with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airlines/{{idAirline}}/airports/{{idAirportInvalid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airlines",
						"{{idAirline}}",
						"airports",
						"{{idAirportInvalid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Airport to Airline that does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The Airline with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airlines/{{idAirlineInvalid}}/airports/{{idAirport}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airlines",
						"{{idAirlineInvalid}}",
						"airports",
						"{{idAirport}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Airports from Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = pm.response.json()",
							"pm.globals.set(\"idAirline\", data.id);",
							"",
							"pm.test(\"Status code is 200\", function(){",
							"    pm.response.to.have.status(200)",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"id\": \"{{idAirport}}\",\n        \"name\": \"Marks Group\",\n        \"code\": \"mw3\",\n        \"city\": \"Kuhnhaven\",\n        \"country\": \"Niger\"\n    }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/airlines/{{idAirline}}/airports",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airlines",
						"{{idAirline}}",
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Airports from Airline that does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The Airline with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"id\": \"{{idAirport}}\",\n        \"name\": \"Marks Group\",\n        \"code\": \"mw3\",\n        \"city\": \"Kuhnhaven\",\n        \"country\": \"Niger\"\n    }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/airlines/{{idAirlineInvalid}}/airports",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airlines",
						"{{idAirlineInvalid}}",
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Airports from Airline that does not exist Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The Airport with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[\n    {\n        \"id\": \"{{idAirportInvalid}}\",\n        \"name\": \"Marks Group\",\n        \"code\": \"mw3\",\n        \"city\": \"Kuhnhaven\",\n        \"country\": \"Niger\"\n    }\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/airlines/{{idAirline}}/airports",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airlines",
						"{{idAirline}}",
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Airports from Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Number of airports > ' + 0, function () {",
							"   var data = pm.response.json()",
							"   pm.expect(data.length).to.greaterThan(0)",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airlines/{{idAirline}}/airports",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airlines",
						"{{idAirline}}",
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Airports from Airline that does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The Airline with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airlines/{{idAirlineInvalid}}/airports",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airlines",
						"{{idAirlineInvalid}}",
						"airports"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Airport from Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"   pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airlines/{{idAirline}}/airports/{{idAirport}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airlines",
						"{{idAirline}}",
						"airports",
						"{{idAirport}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Airport from Airline that does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The Airline with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airlines/{{idAirlineInvalid}}/airports/{{idAirport}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airlines",
						"{{idAirlineInvalid}}",
						"airports",
						"{{idAirport}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Airport that does not exist from Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The Airport with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airlines/{{idAirline}}/airports/{{idAirportInvalid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airlines",
						"{{idAirline}}",
						"airports",
						"{{idAirportInvalid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get an Airport not associated to the Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {",
							"   pm.response.to.have.status(412);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The Airport with the given id is not associated to the Airline\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airlines/{{idAirline}}/airports/{{idAirport}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airlines",
						"{{idAirline}}",
						"airports",
						"{{idAirport}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Airport from Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {",
							"   pm.response.to.have.status(204);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airlines/{{idAirline}}/airports/{{idAirport}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airlines",
						"{{idAirline}}",
						"airports",
						"{{idAirport}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Airport from Airline that does not exist",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The Airline with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airlines/{{idAirlineInvalid}}/airports/{{idAirport}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airlines",
						"{{idAirlineInvalid}}",
						"airports",
						"{{idAirport}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete a Airport that does not exist from Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"   pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The Airport with the given id was not found\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airlines/{{idAirline}}/airports/{{idAirportInvalid}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airlines",
						"{{idAirline}}",
						"airports",
						"{{idAirportInvalid}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete an Airport not associated to the Airline",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 412\", function () {",
							"   pm.response.to.have.status(412);",
							"});",
							"",
							"pm.test(\"Get expected error message\", function () {",
							"   var data = pm.response.json();",
							"   pm.expect(data.message).to.eql(\"The Airport with the given id is not associated to the Airline\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/airlines/{{idAirline}}/airports/{{idAirport}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"airlines",
						"{{idAirline}}",
						"airports",
						"{{idAirport}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/api/v1"
		},
		{
			"key": "idAirlineInvalid",
			"value": "00000000-0000-0000-0000-000000000000",
			"type": "string"
		},
		{
			"key": "idAirportInvalid",
			"value": "00000000-0000-0000-0000-000000000000",
			"type": "string"
		}
	]
}